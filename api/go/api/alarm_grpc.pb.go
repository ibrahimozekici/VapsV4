// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: api/alarm.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlarmServiceClient is the client API for AlarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlarmServiceClient interface {
	// Create creates the alarm
	Create(ctx context.Context, in *CreateAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get return the alarm
	Get(ctx context.Context, in *GetAlarmRequest, opts ...grpc.CallOption) (*GetAlarmResponse, error)
	// Update updates the alarm matching the given alarm_id.
	Update(ctx context.Context, in *UpdateAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	Delete(ctx context.Context, in *DeleteAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAllOrganizationAlarms(ctx context.Context, in *ListOrganizationAlarmRequest2, opts ...grpc.CallOption) (*ListOrganizationAlarmResponse2, error)
	// Create creates the alarm
	CreateMultiple(ctx context.Context, in *CreateMultipleAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	DeleteMultiple(ctx context.Context, in *DeleteMultipleAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	DeleteSensorAlarms(ctx context.Context, in *DeleteMultipleDevAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	DeleteZoneAlarms(ctx context.Context, in *DeleteMultipleZoneAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateDoorTime CreateDoorTime
	CreateDoorTime(ctx context.Context, in *CreateDoorTimeRequest, opts ...grpc.CallOption) (*CreateDoorTimeResponse, error)
	ListDoorAlarm2(ctx context.Context, in *ListDoorAlarmRequest2, opts ...grpc.CallOption) (*ListDoorAlarmResponse, error)
	DeleteDoorAlarm(ctx context.Context, in *DeleteDoorAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMultipleDoorAlarm(ctx context.Context, in *CreateMultipleDoorAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAlarmAutomation(ctx context.Context, in *CreateAlarmAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAlarmAutomation(ctx context.Context, in *GetAlarmAutomationRequest, opts ...grpc.CallOption) (*GetAlarmAutomationResponse, error)
	DeleteAlarmAutomation(ctx context.Context, in *DeleteAlarmAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAlarmAutomation(ctx context.Context, in *UpdateAlarmAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
}

type alarmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlarmServiceClient(cc grpc.ClientConnInterface) AlarmServiceClient {
	return &alarmServiceClient{cc}
}

func (c *alarmServiceClient) Create(ctx context.Context, in *CreateAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) Get(ctx context.Context, in *GetAlarmRequest, opts ...grpc.CallOption) (*GetAlarmResponse, error) {
	out := new(GetAlarmResponse)
	err := c.cc.Invoke(ctx, "/api.AlarmService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) Update(ctx context.Context, in *UpdateAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) Delete(ctx context.Context, in *DeleteAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) ListAllOrganizationAlarms(ctx context.Context, in *ListOrganizationAlarmRequest2, opts ...grpc.CallOption) (*ListOrganizationAlarmResponse2, error) {
	out := new(ListOrganizationAlarmResponse2)
	err := c.cc.Invoke(ctx, "/api.AlarmService/ListAllOrganizationAlarms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) CreateMultiple(ctx context.Context, in *CreateMultipleAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/CreateMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) DeleteMultiple(ctx context.Context, in *DeleteMultipleAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/DeleteMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) DeleteSensorAlarms(ctx context.Context, in *DeleteMultipleDevAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/DeleteSensorAlarms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) DeleteZoneAlarms(ctx context.Context, in *DeleteMultipleZoneAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/DeleteZoneAlarms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) CreateDoorTime(ctx context.Context, in *CreateDoorTimeRequest, opts ...grpc.CallOption) (*CreateDoorTimeResponse, error) {
	out := new(CreateDoorTimeResponse)
	err := c.cc.Invoke(ctx, "/api.AlarmService/CreateDoorTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) ListDoorAlarm2(ctx context.Context, in *ListDoorAlarmRequest2, opts ...grpc.CallOption) (*ListDoorAlarmResponse, error) {
	out := new(ListDoorAlarmResponse)
	err := c.cc.Invoke(ctx, "/api.AlarmService/ListDoorAlarm2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) DeleteDoorAlarm(ctx context.Context, in *DeleteDoorAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/DeleteDoorAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) CreateMultipleDoorAlarm(ctx context.Context, in *CreateMultipleDoorAlarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/CreateMultipleDoorAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) CreateAlarmAutomation(ctx context.Context, in *CreateAlarmAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/CreateAlarmAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) GetAlarmAutomation(ctx context.Context, in *GetAlarmAutomationRequest, opts ...grpc.CallOption) (*GetAlarmAutomationResponse, error) {
	out := new(GetAlarmAutomationResponse)
	err := c.cc.Invoke(ctx, "/api.AlarmService/GetAlarmAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) DeleteAlarmAutomation(ctx context.Context, in *DeleteAlarmAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/DeleteAlarmAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) UpdateAlarmAutomation(ctx context.Context, in *UpdateAlarmAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AlarmService/UpdateAlarmAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/api.AlarmService/GetAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlarmServiceServer is the server API for AlarmService service.
// All implementations must embed UnimplementedAlarmServiceServer
// for forward compatibility
type AlarmServiceServer interface {
	// Create creates the alarm
	Create(context.Context, *CreateAlarmRequest) (*emptypb.Empty, error)
	// Get return the alarm
	Get(context.Context, *GetAlarmRequest) (*GetAlarmResponse, error)
	// Update updates the alarm matching the given alarm_id.
	Update(context.Context, *UpdateAlarmRequest) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	Delete(context.Context, *DeleteAlarmRequest) (*emptypb.Empty, error)
	ListAllOrganizationAlarms(context.Context, *ListOrganizationAlarmRequest2) (*ListOrganizationAlarmResponse2, error)
	// Create creates the alarm
	CreateMultiple(context.Context, *CreateMultipleAlarmRequest) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	DeleteMultiple(context.Context, *DeleteMultipleAlarmRequest) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	DeleteSensorAlarms(context.Context, *DeleteMultipleDevAlarmRequest) (*emptypb.Empty, error)
	// Delete deletes the alarm matching the given alarm_id.
	DeleteZoneAlarms(context.Context, *DeleteMultipleZoneAlarmRequest) (*emptypb.Empty, error)
	// CreateDoorTime CreateDoorTime
	CreateDoorTime(context.Context, *CreateDoorTimeRequest) (*CreateDoorTimeResponse, error)
	ListDoorAlarm2(context.Context, *ListDoorAlarmRequest2) (*ListDoorAlarmResponse, error)
	DeleteDoorAlarm(context.Context, *DeleteDoorAlarmRequest) (*emptypb.Empty, error)
	CreateMultipleDoorAlarm(context.Context, *CreateMultipleDoorAlarmRequest) (*emptypb.Empty, error)
	CreateAlarmAutomation(context.Context, *CreateAlarmAutomationRequest) (*emptypb.Empty, error)
	GetAlarmAutomation(context.Context, *GetAlarmAutomationRequest) (*GetAlarmAutomationResponse, error)
	DeleteAlarmAutomation(context.Context, *DeleteAlarmAutomationRequest) (*emptypb.Empty, error)
	UpdateAlarmAutomation(context.Context, *UpdateAlarmAutomationRequest) (*emptypb.Empty, error)
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	mustEmbedUnimplementedAlarmServiceServer()
}

// UnimplementedAlarmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlarmServiceServer struct {
}

func (UnimplementedAlarmServiceServer) Create(context.Context, *CreateAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlarmServiceServer) Get(context.Context, *GetAlarmRequest) (*GetAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAlarmServiceServer) Update(context.Context, *UpdateAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlarmServiceServer) Delete(context.Context, *DeleteAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAlarmServiceServer) ListAllOrganizationAlarms(context.Context, *ListOrganizationAlarmRequest2) (*ListOrganizationAlarmResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOrganizationAlarms not implemented")
}
func (UnimplementedAlarmServiceServer) CreateMultiple(context.Context, *CreateMultipleAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiple not implemented")
}
func (UnimplementedAlarmServiceServer) DeleteMultiple(context.Context, *DeleteMultipleAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMultiple not implemented")
}
func (UnimplementedAlarmServiceServer) DeleteSensorAlarms(context.Context, *DeleteMultipleDevAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensorAlarms not implemented")
}
func (UnimplementedAlarmServiceServer) DeleteZoneAlarms(context.Context, *DeleteMultipleZoneAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZoneAlarms not implemented")
}
func (UnimplementedAlarmServiceServer) CreateDoorTime(context.Context, *CreateDoorTimeRequest) (*CreateDoorTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoorTime not implemented")
}
func (UnimplementedAlarmServiceServer) ListDoorAlarm2(context.Context, *ListDoorAlarmRequest2) (*ListDoorAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDoorAlarm2 not implemented")
}
func (UnimplementedAlarmServiceServer) DeleteDoorAlarm(context.Context, *DeleteDoorAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoorAlarm not implemented")
}
func (UnimplementedAlarmServiceServer) CreateMultipleDoorAlarm(context.Context, *CreateMultipleDoorAlarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultipleDoorAlarm not implemented")
}
func (UnimplementedAlarmServiceServer) CreateAlarmAutomation(context.Context, *CreateAlarmAutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlarmAutomation not implemented")
}
func (UnimplementedAlarmServiceServer) GetAlarmAutomation(context.Context, *GetAlarmAutomationRequest) (*GetAlarmAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlarmAutomation not implemented")
}
func (UnimplementedAlarmServiceServer) DeleteAlarmAutomation(context.Context, *DeleteAlarmAutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlarmAutomation not implemented")
}
func (UnimplementedAlarmServiceServer) UpdateAlarmAutomation(context.Context, *UpdateAlarmAutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlarmAutomation not implemented")
}
func (UnimplementedAlarmServiceServer) GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (UnimplementedAlarmServiceServer) mustEmbedUnimplementedAlarmServiceServer() {}

// UnsafeAlarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlarmServiceServer will
// result in compilation errors.
type UnsafeAlarmServiceServer interface {
	mustEmbedUnimplementedAlarmServiceServer()
}

func RegisterAlarmServiceServer(s grpc.ServiceRegistrar, srv AlarmServiceServer) {
	s.RegisterService(&AlarmService_ServiceDesc, srv)
}

func _AlarmService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).Create(ctx, req.(*CreateAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).Get(ctx, req.(*GetAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).Update(ctx, req.(*UpdateAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).Delete(ctx, req.(*DeleteAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_ListAllOrganizationAlarms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAlarmRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).ListAllOrganizationAlarms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/ListAllOrganizationAlarms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).ListAllOrganizationAlarms(ctx, req.(*ListOrganizationAlarmRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_CreateMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipleAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).CreateMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/CreateMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).CreateMultiple(ctx, req.(*CreateMultipleAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_DeleteMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultipleAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).DeleteMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/DeleteMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).DeleteMultiple(ctx, req.(*DeleteMultipleAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_DeleteSensorAlarms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultipleDevAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).DeleteSensorAlarms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/DeleteSensorAlarms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).DeleteSensorAlarms(ctx, req.(*DeleteMultipleDevAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_DeleteZoneAlarms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultipleZoneAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).DeleteZoneAlarms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/DeleteZoneAlarms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).DeleteZoneAlarms(ctx, req.(*DeleteMultipleZoneAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_CreateDoorTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoorTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).CreateDoorTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/CreateDoorTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).CreateDoorTime(ctx, req.(*CreateDoorTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_ListDoorAlarm2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDoorAlarmRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).ListDoorAlarm2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/ListDoorAlarm2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).ListDoorAlarm2(ctx, req.(*ListDoorAlarmRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_DeleteDoorAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDoorAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).DeleteDoorAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/DeleteDoorAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).DeleteDoorAlarm(ctx, req.(*DeleteDoorAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_CreateMultipleDoorAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipleDoorAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).CreateMultipleDoorAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/CreateMultipleDoorAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).CreateMultipleDoorAlarm(ctx, req.(*CreateMultipleDoorAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_CreateAlarmAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlarmAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).CreateAlarmAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/CreateAlarmAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).CreateAlarmAutomation(ctx, req.(*CreateAlarmAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_GetAlarmAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlarmAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).GetAlarmAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/GetAlarmAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).GetAlarmAutomation(ctx, req.(*GetAlarmAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_DeleteAlarmAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlarmAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).DeleteAlarmAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/DeleteAlarmAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).DeleteAlarmAutomation(ctx, req.(*DeleteAlarmAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_UpdateAlarmAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlarmAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).UpdateAlarmAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/UpdateAlarmAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).UpdateAlarmAutomation(ctx, req.(*UpdateAlarmAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AlarmService/GetAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlarmService_ServiceDesc is the grpc.ServiceDesc for AlarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AlarmService",
	HandlerType: (*AlarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AlarmService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AlarmService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AlarmService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlarmService_Delete_Handler,
		},
		{
			MethodName: "ListAllOrganizationAlarms",
			Handler:    _AlarmService_ListAllOrganizationAlarms_Handler,
		},
		{
			MethodName: "CreateMultiple",
			Handler:    _AlarmService_CreateMultiple_Handler,
		},
		{
			MethodName: "DeleteMultiple",
			Handler:    _AlarmService_DeleteMultiple_Handler,
		},
		{
			MethodName: "DeleteSensorAlarms",
			Handler:    _AlarmService_DeleteSensorAlarms_Handler,
		},
		{
			MethodName: "DeleteZoneAlarms",
			Handler:    _AlarmService_DeleteZoneAlarms_Handler,
		},
		{
			MethodName: "CreateDoorTime",
			Handler:    _AlarmService_CreateDoorTime_Handler,
		},
		{
			MethodName: "ListDoorAlarm2",
			Handler:    _AlarmService_ListDoorAlarm2_Handler,
		},
		{
			MethodName: "DeleteDoorAlarm",
			Handler:    _AlarmService_DeleteDoorAlarm_Handler,
		},
		{
			MethodName: "CreateMultipleDoorAlarm",
			Handler:    _AlarmService_CreateMultipleDoorAlarm_Handler,
		},
		{
			MethodName: "CreateAlarmAutomation",
			Handler:    _AlarmService_CreateAlarmAutomation_Handler,
		},
		{
			MethodName: "GetAlarmAutomation",
			Handler:    _AlarmService_GetAlarmAutomation_Handler,
		},
		{
			MethodName: "DeleteAlarmAutomation",
			Handler:    _AlarmService_DeleteAlarmAutomation_Handler,
		},
		{
			MethodName: "UpdateAlarmAutomation",
			Handler:    _AlarmService_UpdateAlarmAutomation_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _AlarmService_GetAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/alarm.proto",
}
