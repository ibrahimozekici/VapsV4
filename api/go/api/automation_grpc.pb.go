// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: api/automation.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutomationServiceClient is the client API for AutomationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutomationServiceClient interface {
	Create(ctx context.Context, in *CreateAutomationRequest, opts ...grpc.CallOption) (*CreateAutomationResponse, error)
	// Get return the automation
	Get(ctx context.Context, in *GetAutomationRequest, opts ...grpc.CallOption) (*GetAutomationResponse, error)
	List(ctx context.Context, in *ListAutomationRequest, opts ...grpc.CallOption) (*ListAutomationResponse, error)
	// Update updates the automation matching the given automation_id.
	Update(ctx context.Context, in *UpdateAutomationRequest, opts ...grpc.CallOption) (*GetAutomationResponse, error)
	// Delete deletes the automation matching the given automation_id.
	Delete(ctx context.Context, in *DeleteAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type automationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomationServiceClient(cc grpc.ClientConnInterface) AutomationServiceClient {
	return &automationServiceClient{cc}
}

func (c *automationServiceClient) Create(ctx context.Context, in *CreateAutomationRequest, opts ...grpc.CallOption) (*CreateAutomationResponse, error) {
	out := new(CreateAutomationResponse)
	err := c.cc.Invoke(ctx, "/api.AutomationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) Get(ctx context.Context, in *GetAutomationRequest, opts ...grpc.CallOption) (*GetAutomationResponse, error) {
	out := new(GetAutomationResponse)
	err := c.cc.Invoke(ctx, "/api.AutomationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) List(ctx context.Context, in *ListAutomationRequest, opts ...grpc.CallOption) (*ListAutomationResponse, error) {
	out := new(ListAutomationResponse)
	err := c.cc.Invoke(ctx, "/api.AutomationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) Update(ctx context.Context, in *UpdateAutomationRequest, opts ...grpc.CallOption) (*GetAutomationResponse, error) {
	out := new(GetAutomationResponse)
	err := c.cc.Invoke(ctx, "/api.AutomationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) Delete(ctx context.Context, in *DeleteAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AutomationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationServiceServer is the server API for AutomationService service.
// All implementations must embed UnimplementedAutomationServiceServer
// for forward compatibility
type AutomationServiceServer interface {
	Create(context.Context, *CreateAutomationRequest) (*CreateAutomationResponse, error)
	// Get return the automation
	Get(context.Context, *GetAutomationRequest) (*GetAutomationResponse, error)
	List(context.Context, *ListAutomationRequest) (*ListAutomationResponse, error)
	// Update updates the automation matching the given automation_id.
	Update(context.Context, *UpdateAutomationRequest) (*GetAutomationResponse, error)
	// Delete deletes the automation matching the given automation_id.
	Delete(context.Context, *DeleteAutomationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAutomationServiceServer()
}

// UnimplementedAutomationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAutomationServiceServer struct {
}

func (UnimplementedAutomationServiceServer) Create(context.Context, *CreateAutomationRequest) (*CreateAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAutomationServiceServer) Get(context.Context, *GetAutomationRequest) (*GetAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAutomationServiceServer) List(context.Context, *ListAutomationRequest) (*ListAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAutomationServiceServer) Update(context.Context, *UpdateAutomationRequest) (*GetAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAutomationServiceServer) Delete(context.Context, *DeleteAutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAutomationServiceServer) mustEmbedUnimplementedAutomationServiceServer() {}

// UnsafeAutomationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutomationServiceServer will
// result in compilation errors.
type UnsafeAutomationServiceServer interface {
	mustEmbedUnimplementedAutomationServiceServer()
}

func RegisterAutomationServiceServer(s grpc.ServiceRegistrar, srv AutomationServiceServer) {
	s.RegisterService(&AutomationService_ServiceDesc, srv)
}

func _AutomationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AutomationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).Create(ctx, req.(*CreateAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AutomationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).Get(ctx, req.(*GetAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AutomationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).List(ctx, req.(*ListAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AutomationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).Update(ctx, req.(*UpdateAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AutomationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).Delete(ctx, req.(*DeleteAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutomationService_ServiceDesc is the grpc.ServiceDesc for AutomationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutomationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AutomationService",
	HandlerType: (*AutomationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AutomationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AutomationService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AutomationService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AutomationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AutomationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/automation.proto",
}
